package siteInfo.chat;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.Scanner;

import com.jfoenix.controls.JFXButton;
import com.jfoenix.controls.JFXTextArea;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.image.ImageView;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import main.view.MainViewController;
import vo.ChatVO;
import vo.MemberVO;

public class MultiChatClientMain extends Application {
	
	@FXML
	private ImageView imageLogo;
	
	@FXML
	private Label lbName;
	
	@FXML
	private VBox vbContent;
	
	@FXML
    private JFXTextArea taContentInput;
    
    @FXML
    private JFXButton btnSend;
    
    @FXML
    private JFXButton btnStopChat;
	
	private Socket socket;
//	private DataOutputStream dout;
	private ObjectOutputStream oout;
	private static ChatVO cv;
	private MemberVO currentMemberVO;
	private String name;
	
	public static ChatVO getChatVO() {
		return cv;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
	public VBox getVbContent() {
		return vbContent;
	}

	@Override
	public void start(Stage primaryStage) throws Exception {
		currentMemberVO = MainViewController.getCurrentMember();
		if(currentMemberVO==null) {
			name="고객";
		}else {
			name=currentMemberVO.getMem_id();
		}
		Parent root = FXMLLoader.load(getClass().getResource("MultichatClient.fxml"));
		
		btnSend = (JFXButton) root.lookup("#btnSend");
		
		btnSend.setOnAction(e->{
			
			Thread serverThread = new Thread(new Runnable() {
				
				@Override
				public void run() {
					try {
//						dout = new DataOutputStream(socket.getOutputStream());
//						if( dout != null) {
//							//  메시지를 서버로 전송
//							dout.writeUTF("[" + name + "] " +  taContentInput.getText() );
//						}
						cv = new ChatVO();
						cv.setChat_message("[" + name + "] " +  taContentInput.getText());
						oout = new ObjectOutputStream(socket.getOutputStream());
						if(oout!=null) {
							oout.writeObject(cv);
						}
						
					}catch(IOException e) {
						e.printStackTrace();
					}
				}
			});
			serverThread.start();
		});

		Scene scene = new Scene(root);

		primaryStage.setTitle("JavaFx MultiChatClient 프로그램");
		primaryStage.setScene(scene);
		primaryStage.show();
		
		new Thread(new Runnable() { // 클라이언트 쓰레드 생성 및 스타트
			
			@Override
			public void run() {
				
				clientStart();  // 클라이언트 시작
			}
		}).start();
	}
	
	// 비지니스 로직 처리
	public void clientStart() {
		
		try {
			String serverIp = "127.0.0.1";
			socket = new Socket(serverIp, 7777);
			cv= new ChatVO();
			cv.setChat_message("서버에 연결되었습니다.");
//			displayMessage("서버에 연결되었습니다.");
			
			// 대화명 전송하기
//			dout = new DataOutputStream(socket.getOutputStream());
//			if(dout != null) {
//				dout.writeUTF(name);
//			}
			currentMemberVO = MainViewController.getCurrentMember();
			if(currentMemberVO==null) {
				name="고객";
			}else {
				name=currentMemberVO.getMem_id();
			}
			cv.setMem_id(name);
			oout = new ObjectOutputStream(socket.getOutputStream());
			if(oout!=null) {
				oout.writeObject(cv);
			}
			
			// 수신용 쓰레드 생성
			ClientReceiver receiver = new ClientReceiver(socket);
			
			// 쓰레드 실행
			receiver.start();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	// 메시지를 전송하는 Thread
	class ClientSender extends Thread{
		Socket socket;
//		DataOutputStream dout;
		ObjectOutputStream oout;
		String name;
		Scanner scan = new Scanner(System.in);
		
		public ClientSender(Socket socket, String name) {
			this.name = name;
			this.socket = socket;
			try {
				oout = new ObjectOutputStream(socket.getOutputStream());
			} catch (IOException e) {
				e.printStackTrace();
			}
			
//			try {
//				dout = new DataOutputStream(socket.getOutputStream());
//			} catch (IOException e) {
//				e.printStackTrace();
//			}
		}
		
		@Override
		public void run() {
//			try {
//				// 시작하자 마자 자신의 대화명을 서버로 전송
//				if(dout!=null) {
//					dout.writeUTF(name);
//				}
//				while( dout != null) {
//					// 키보드로 입력받은 메시지를 서버로 전송
//					dout.writeUTF("[" + name + "] " +  scan.nextLine() );
//				}
//			}catch(IOException e) {
//				e.printStackTrace();
//			}
			cv.setMem_id(name);
			cv.setChat_message("[" + name + "] " +  scan.nextLine());
			try{
				if(oout!=null) {
					oout.writeObject(cv);
				}
				while(oout != null) {
					oout.writeObject(cv);
				}
			}catch (IOException e) {
				e.printStackTrace();
			}
		}
	}  // 송신용 쓰레드 끝...,
	
	// 수신용 Thread 클래스 정의
	class ClientReceiver extends Thread{
		Socket socket;
//		DataInputStream din;
		ObjectInputStream oin;
		
		// 생성자
		public ClientReceiver(Socket socket) {
			this.socket = socket;
//			try {
//				din = new DataInputStream(socket.getInputStream());
//			} catch (IOException e) {
//				e.printStackTrace();
//			}
			try {
				oin = new ObjectInputStream(socket.getInputStream());
			}catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		@Override
		public void run() {
//			while(din!=null) {
//				try {
//					// 서버로부터 수신한 메시지 출력하기
//					displayMessage(din.readUTF());
//				} catch (IOException e) {
//					e.printStackTrace();
//				}
//			}
			while(oin!=null) {
				displayMessage(cv);
			}
		}
	}
	
	public static void main(String[] args) {
		launch(args);
	}
	
	
	/**
	 * Platform.runLater 를 이용한 메시지 처리
	 * @param msg
	 */
//	public void displayMessage(final String msg) {
//		Platform.runLater(()->{
//			
//			try {
//				FXMLLoader chatBoxLoader = new FXMLLoader(getClass().getClassLoader().getResource("siteInfo/chat/ChatBox.fxml"));
//				Parent chatBoxNodes = chatBoxLoader.load();
//				ChatBoxController cbc = chatBoxLoader.getController();
//				cbc.setChatContent(msg);
//				vbContent.getChildren().add(chatBoxNodes);
//				
//			} catch (IOException e) {
//				e.printStackTrace();
//			}
////			taContentInput.appendText(msg + "\n");
//		});
//	}
	public void displayMessage(final ChatVO cv) {
		Platform.runLater(()->{
			
			try {
				FXMLLoader chatBoxLoader = new FXMLLoader(getClass().getClassLoader().getResource("siteInfo/chat/ChatBox.fxml"));
				Parent chatBoxNodes = chatBoxLoader.load();
				ChatBoxController cbc = chatBoxLoader.getController();
				cbc.setChatContent(cv);
				vbContent.getChildren().add(chatBoxNodes);
				
			} catch (IOException e) {
				e.printStackTrace();
			}
		});
	}
}
